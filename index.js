var util = require('util');
var pathFn = require('path');

var through = require('through');
var gutil = require('gulp-util');
var PluginError = gutil.PluginError;
var PluginName = "gulp-gather-template"

module.exports = function(option) {

    option = util._extend({ // use option to override
        filename: "all_templates.js",
        output: "commmonjs"
    },option)

    var comment_header = "// generated by gulp-gather-template \n"
    var default_output = {
        "json": '',
        'browser': comment_header + 'var templates = ',
        'commmonjs': comment_header + "module.exports = "
    }

    if(default_output[option.output]){
        option.output = default_output[option.output]
    }

    var files = []
    var templates = {}

    return through(write, end)

    function write(file) {
        if (file.isNull()) {
            // console.log('null');
            return
        }

        if (file.isStream()) {
            throw new PluginError(PluginName, "stream is not supported ...")
        }

        files.push(file)
    }

    function end() {

        if(files.length < 1) return

        // files
        // base path
        files.forEach(function(file) {
            // TODO : templates/views/index.html -> nested
            var keyPath = file.relative

            var filename = pathFn.basename(file.path)
            filename = filename.slice(0, filename.indexOf('.')) // a.jsx.html -> a
            templates[filename] = file.contents.toString()
        })

        var ret = new gutil.File({
            contents: new Buffer(option.output + JSON.stringify(templates)),
            path: process.cwd() + '/' + option.filename,
            base: process.cwd()
        })

        this.push(ret)
    }
}